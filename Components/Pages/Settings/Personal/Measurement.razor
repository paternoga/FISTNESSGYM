@page "/settings/personal/measurement"
@using FISTNESSGYM.Models.database
@attribute [Authorize]

<PageTitle>POMIARY</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Pomiary ciała (cm)" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Dodaj pomiar" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenTextBox Placeholder="Szukaj..." style="display: block; width: 100%" @oninput="@Search" aria-label="Szukaj po wszystkich kolumnach" />

    <RadzenRow>
        <RadzenColumn SizeMD="12">
            <RadzenDataGrid @ref="grid0" AllowPaging="true" AllowSorting="true"
                            ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30}) Data="@measurements" TItem="FISTNESSGYM.Models.database.Measurement" >
                <Columns>
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="UserId" Title="Id" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="Weight" Title="Waga" Width="90px" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="WaistCircumference" Width="90px" Title="Talia" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="ChestCircumference" Width="110px" Title="Klatka piersiowa" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="ArmCircumference" Width="90px" Title="Ramię" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="LegCircumference" Width="90px" Title="Noga" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="HipCircumference" Width="90px" Title="Biodra" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="BodyFat" Width="100px" Title="Bodyfat" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="MeasurementDate" Width="170px" Title="Data Pomiaru" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="Notes" Title="Uwagi" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center"/>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Inject]
    protected databaseService DatabaseService { get; set; }

    protected IEnumerable<FISTNESSGYM.Models.database.Measurement> measurements;
    protected RadzenDataGrid<FISTNESSGYM.Models.database.Measurement> grid0;
    protected string search = "";

    protected override async Task OnInitializedAsync()
    {
        measurements = await DatabaseService.GetMeasurementsAsync();
    }

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";
        await grid0.GoToPage(0);
        //measurements = await DatabaseService.GetMeasurements(new Query { Filter = $@"i => i.UserName.Contains(@0)", FilterParameters = new object[] { search } });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        //await DialogService.OpenAsync<AddMeasurement>("Add Measurement", null);
        await grid0.Reload();
    }

    protected async Task EditRow(Measurement measurement)
    {
        //await DialogService.OpenAsync<EditMeasurement>("Edit Measurement", new Dictionary<string, object> { { "Id", measurement.Id } });
    }

    protected async Task GridDeleteButtonClick(Measurement measurement)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                //var deleteResult = await DatabaseService.DeleteMeasurement(measurement.Id);
                //if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete measurement"
                });
        }
    }
}
