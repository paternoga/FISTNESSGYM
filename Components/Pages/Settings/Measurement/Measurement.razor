@page "/settings/measurement"
@using FISTNESSGYM.Models.database
@attribute [Authorize]

<PageTitle>POMIARY</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Pomiary ciała (cm)" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        @if (AuthorizationService.IsClient)
        {
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add" Text="Dodaj pomiar" ButtonStyle="ButtonStyle.Primary" Click="@OpenAddMeasurementDialog" />
            </RadzenStack>
        </RadzenColumn>
        }
    </RadzenRow>

    <RadzenTextBox Placeholder="Szukaj..." style="display: block; width: 100%" @oninput="@Search" aria-label="Szukaj po wszystkich kolumnach" />

    <RadzenRow>
        <RadzenColumn SizeMD="12">
            <RadzenDataGrid @ref="grid0" AllowPaging="true" AllowSorting="true"
                            ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30}) Data="@measurements" TItem="FISTNESSGYM.Models.database.Measurement" >
                <Columns>
                    @if (!AuthorizationService.IsClient)
                    {
                        <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="UserId" Title="Id" />
                    }
                    
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="Weight" Title="Waga" Width="90px" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="WaistCircumference" Width="90px" Title="Talia" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="ChestCircumference" Width="110px" Title="Klatka piersiowa" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="ArmCircumference" Width="90px" Title="Ramię" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="LegCircumference" Width="90px" Title="Noga" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="HipCircumference" Width="90px" Title="Biodra" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="BodyFat" Width="100px" Title="Bodyfat" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="MeasurementDate" Width="170px" Title="Data Pomiaru" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Property="Notes" Title="Uwagi" />
                    <RadzenDataGridColumn TItem="FISTNESSGYM.Models.database.Measurement" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center"/>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    @using FISTNESSGYM.Services
    @inject SecurityService SecurityService
    @inject NavigationManager NavigationManager


    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Inject]
    protected databaseService DatabaseService { get; set; }

    [Inject]
    protected AuthorizationService AuthorizationService { get; set; }

    protected IEnumerable<FISTNESSGYM.Models.database.Measurement> measurements;
    protected RadzenDataGrid<FISTNESSGYM.Models.database.Measurement> grid0;
    protected string search = "";

    protected override async Task OnInitializedAsync()
    {
        if (AuthorizationService.IsAdmin || AuthorizationService.IsTrainer || AuthorizationService.IsWorker)
        {
            measurements = await DatabaseService.GetMeasurementsAsync();
        }
        else if(AuthorizationService.IsClient)
        {
            var userId = SecurityService.User.Id;
            measurements = await DatabaseService.GetMeasurementsByUserAsync(userId);
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        if (AuthorizationService.IsAdmin)
        {
            measurements = await DatabaseService.GetMeasurementsAsync(search);
        }
        else
        {
            var userId = SecurityService.User?.Id;
            if (!string.IsNullOrEmpty(userId))
            {
                measurements = await DatabaseService.GetMeasurementsByUserAsync(userId, search);
            }
        }

        await grid0.GoToPage(0);
    }
    protected async Task OpenAddMeasurementDialog()
    {
        var result = await DialogService.OpenAsync<AddMeasurement>("Dodaj pomiar");

        if (result != null)
        {
            await grid0.Reload();
        }
    }

    

    protected async Task GridDeleteButtonClick(Measurement measurement)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete measurement"
                });
        }
    }
}
