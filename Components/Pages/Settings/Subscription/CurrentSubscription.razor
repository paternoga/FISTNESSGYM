@page "/settings/subscription/status"
@using System.Security.Claims
@using FISTNESSGYM.Components.Widgets
@using FISTNESSGYM.Models.database
@using FISTNESSGYM.Services
@inject SubscriptionService SubscriptionService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>SUBSKRYPCJA</PageTitle>
<RadzenStack>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenText Text="Twoja subskrypcja" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </RadzenColumn>

    @if (currentSubscription != null)
    {
        <RadzenCard>
            <ChildContent>
                <h4>Aktualna Subskrypcja</h4>
                <p><strong>Typ subskrypcji:</strong> @currentSubscription.SubscriptionType?.TypeName</p>
                <p><strong>Opis:</strong> @currentSubscription.SubscriptionType?.Description</p>
                <p><strong>Data rozpoczęcia:</strong> @currentSubscription.StartDate.ToString("dd/MM/yyyy")</p>
                <p><strong>Data zakończenia:</strong> @currentSubscription.EndDate.ToString("dd/MM/yyyy")</p>

                <RadzenButton Text="Zrezygnuj z subskrypcji" ButtonStyle="ButtonStyle.Danger" Click="() => CancelSubscription()" style="margin-top: 20px;">
                </RadzenButton>

            </ChildContent>
        </RadzenCard>
    }
    else
    {
        <h4>Brak aktualnej subskrypcji, zakup subskrypcję w zakładce Pakiety!</h4>
    }


    <h4>Historia Subskrypcji</h4>

    @if (subscriptions != null && subscriptions.Count > 0)
    {
        <RadzenDataList Data="@subscriptions" WrapItems="true">
            <Template Context="subscription">
                <RadzenCard Style="margin-bottom: 10px;">
                    <ChildContent>
                        <div class="row">
                            <div class="col-6">
                                <strong>Typ subskrypcji:</strong> @subscription.SubscriptionType?.TypeName
                            </div>
                            <div class="col-6">
                                <strong>Data rozpoczęcia:</strong> @subscription.StartDate.ToString("dd/MM/yyyy")
                            </div>
                            <div class="col-6">
                                <strong>Data zakończenia:</strong> @subscription.EndDate.ToString("dd/MM/yyyy")
                            </div>
                            <div class="col-6">
                                <strong>Cena:</strong> @subscription.Price.ToString("C")
                            </div>
                            <div class="col-6">
                                <strong>Status:</strong> @subscription.SubscriptionStatus?.Status.ToString()
                            </div>
                        </div>
                    </ChildContent>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
    else
    {
        <p>Brak historii subskrypcji.</p>
    }


</RadzenStack>

@code {
    private Subscription currentSubscription;
    private List<Subscription> subscriptions = new List<Subscription>();
    private int selectedSubscriptionTypeId;
    private string userId;

    private List<SubscriptionType> subscriptionTypes = new List<SubscriptionType>
    {
        new SubscriptionType { Id = 1, TypeName = "Miesięczna - 99 zł" },
        new SubscriptionType { Id = 2, TypeName = "Roczna - 950 zł" },
        new SubscriptionType { Id = 3, TypeName = "Próbna - 1 zł" }
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            currentSubscription = await SubscriptionService.GetCurrentSubscriptionAsync(userId);
            subscriptions = await SubscriptionService.GetSubscriptionsByUserIdAsync(userId); 
        }
        else
        {
            throw new Exception("Użytkownik nie jest zalogowany.");
        }
    }

    private async Task CancelSubscription()
    {
        if (currentSubscription != null)
        {
            try
            {
                await SubscriptionService.CancelSubscriptionAsync(currentSubscription.Id);
                currentSubscription = null;
                Console.WriteLine("Subskrypcja została anulowana.");
                subscriptions = await SubscriptionService.GetSubscriptionsByUserIdAsync(userId); 
            }
            catch (Exception ex)
            {
                Console.WriteLine("Błąd podczas anulowania subskrypcji: " + ex.Message);
            }
        }
    }
}
