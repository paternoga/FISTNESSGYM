@page "/event-dialog"
@using FISTNESSGYM.Components.Pages.Calendar
@using FISTNESSGYM.Services
@inject AuthorizationService AuthorizationService
@inject DialogService DialogService
@inject databaseService DatabaseService

@if (AuthorizationService.IsWorker || AuthorizationService.IsTrainer || AuthorizationService.IsAdmin)
{
    <PageTitle>KALENDARZ</PageTitle>

    <RadzenTemplateForm TItem="SchedulerEvent" Data="@model" Submit="@OnSubmit">
        <RadzenStack Gap="1rem">
            <!-- Field for Event Title -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Tytuł" Style="width: 8rem;" />
                <RadzenTextBox @bind-Value="model.Title" Name="Title" Style="width: 25rem;" />
                <RadzenRequiredValidator Component="Title" Text="Tytuł jest wymagany" />
            </RadzenStack>

            <!-- Field for Instructor Name -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Instruktor" Style="width: 8rem;" />
                <RadzenTextBox @bind-Value="model.InstructorName" Name="InstructorName" Style="width: 25rem;" />
                <RadzenRequiredValidator Component="InstructorName" Text="Imię instruktora jest wymagane" />
            </RadzenStack>

            <!-- Dropdown for Instructor Email -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Email instruktora" Style="width: 8rem;" />
                <RadzenDropDown Name="InstructorEmail"
                                @bind-Value="model.InstructorEmail"
                                Data="@instructorEmails"
                                Style="width: 25rem;"
                                Placeholder="Wybierz email instruktora" />
                <RadzenRequiredValidator Component="InstructorEmail" Text="Email instruktora jest wymagany" />
            </RadzenStack>

            <!-- Field for Start Date and Time -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Początek" Style="width: 8rem;" />
                <RadzenDatePicker @bind-Value="model.Start" Name="Start" ShowTime="true" Style="width: 25rem;" />
                <RadzenRequiredValidator Component="Start" Text="Czas rozpoczęcia jest wymagany" />
            </RadzenStack>

            <!-- Field for End Date and Time -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Koniec" Style="width: 8rem;" />
                <RadzenDatePicker Name="End" @bind-Value="model.End" ShowTime="true" Style="width: 25rem;" />
                <RadzenRequiredValidator Component="End" Text="Czas zakończenia jest wymagany" />
            </RadzenStack>

            <!-- Field for Maximum Participants -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Liczba uczestników" Style="width: 8rem;" />
                <RadzenNumeric @bind-Value="model.MaxParticipants" Name="MaxParticipants" Style="width: 25rem;" />
                <RadzenRequiredValidator Component="MaxParticipants" Text="Maksymalna liczba uczestników jest wymagana" />
                <RadzenNumericRangeValidator Component="MaxParticipants" Min="1" Text="Liczba uczestników nie może być mniejsza niż 1" />
            </RadzenStack>

            <!-- Save Button -->
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Zapisz" />
            </RadzenStack>
        </RadzenStack>
    </RadzenTemplateForm>

    @code {
    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }

    [Parameter]
    public SchedulerEvent EventItem { get; set; }

    SchedulerEvent model = new SchedulerEvent();
    List<string> instructorEmails = new List<string>();

    protected override void OnParametersSet()
    {
        // Initialize model based on provided EventItem for editing
        if (EventItem != null)
        {
            model = EventItem;
        }
        else
        {
            model.Start = Start;
            model.End = End;
            model.MaxParticipants = 1;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Pobierz adresy email trenerów zaraz po załadowaniu komponentu
        instructorEmails = await DatabaseService.GetTrainerEmailsAsync();
    }

    void OnSubmit()
    {
        // Close the dialog and return the modified event
        DialogService.Close(model);
    }
    }
}
else
{
    <RadzenText>Próba nieautoryzowanego dostępu zostaje zgłoszona na policję!</RadzenText>
    <PageTitle>Próba nieautoryzowanego dostępu zostaje zgłoszona na policję!</PageTitle>
}
