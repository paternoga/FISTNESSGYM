@page "/training/calendar"
@using FISTNESSGYM.Components.Pages.Calendar
@using FISTNESSGYM.Services
@using FISTNESSGYM.Models
@using Radzen.Blazor
@inject databaseService databaseService
@inject DialogService DialogService
@inject SecurityService SecurityService
@inject AuthorizationService AuthorizationService
@inject IJSRuntime JSRuntime

<PageTitle>KALENDARZ</PageTitle>

<RadzenScheduler TItem="SchedulerEvent" Data="@events" StartProperty="Start" EndProperty="End" TextProperty="Title"
                 Style="height: 680px; width: 1400px" SlotSelect="OnSlotSelect" AppointmentSelect="OnEventSelect">
    <RadzenDayView TimeFormat="HH:mm" />
    <RadzenWeekView TimeFormat="HH:mm" />
</RadzenScheduler>

<script>
    function translateScheduler() {
        document.querySelectorAll('.rz-button-text').forEach(button => {
            if (button.textContent.trim() === 'Day') {
                button.textContent = 'Dzieñ';
            }
            if (button.textContent.trim() === 'Week') {
                button.textContent = 'Tydzieñ';
            }
        });
        const todayButton = document.querySelector('.rz-button.rz-today');
        if (todayButton && todayButton.textContent.trim() === 'Today') {
            todayButton.textContent = 'Dzisiaj';
        }
    }
</script>

@code {
    List<SchedulerEvent> events;
    string currentUserId;

    protected override async Task OnInitializedAsync()
    {

        if (SecurityService.User != null && SecurityService.IsAuthenticated())
        {
            // Retrieve the logged-in user's ID
            currentUserId = SecurityService.User.Id;
        }

        await LoadEventsAsync(); // Load events when the component initializes
    }

    // Load events from the database
    private async Task LoadEventsAsync()
    {
        events = await databaseService.GetAllEventsAsync();
        StateHasChanged();  // Refresh UI with updated events
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (AuthorizationService.IsWorker || AuthorizationService.IsTrainer || AuthorizationService.IsAdmin)
        {
            // Open the dialog to add a new event with a default duration of 1 hour
            var newEvent = await DialogService.OpenAsync<EventDialog>("Add Event", new Dictionary<string, object>
            {
            { "Start", args.Start },
            { "End", args.Start.AddHours(1) }  // Set event end time to 1 hour after the start
            });

            if (newEvent != null)
            {
                // Save the new event using the database service
                await databaseService.CreateEventAsync(newEvent);
                await LoadEventsAsync(); // Refresh events list after adding
            }
        }

    }

    async Task OnEventSelect(SchedulerAppointmentSelectEventArgs<SchedulerEvent> args)
    {
        if (AuthorizationService.IsClient)
        {
            var eventDetails = await DialogService.OpenAsync<EventDetailsDialog>("Szczegó³y wydarzenia", new Dictionary<string, object>
        {
            { "EventItem", args.Data },
            { "CurrentUserId", currentUserId } // Pass the user's ID to the dialog
        });

            if (eventDetails == true)
            {
                await LoadEventsAsync(); // Refresh events after reservation
            }
        }
        else if (AuthorizationService.IsWorker || AuthorizationService.IsTrainer || AuthorizationService.IsAdmin)
        {
            // Show event edit dialog for admin
            var editedEvent = await DialogService.OpenAsync<EditEventDialog>("Edytuj wydarzenie", new Dictionary<string, object>
        {
            { "EventItem", args.Data }
            });

            if (editedEvent == null)
            {
                await LoadEventsAsync();
            }
            else
            {
                await databaseService.UpdateEventAsync(editedEvent);
                await LoadEventsAsync();
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("translateScheduler");
        }
    }

}
