@page "/analytics/sales-dashboard"
@inject ICartService CartService
@inject IProductService ProductService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using FISTNESSGYM.Models.database
@using FISTNESSGYM.Models.Database
@using FISTNESSGYM.Services
@using Radzen

@attribute [Authorize]

<div style="display: flex; gap: 20px; flex-wrap: wrap; justify-content: space-between;">
    <!-- Wybór Miesi¹ca i Roku -->
    <div style="flex: 1 1 200px;">
        <RadzenDropDown @bind-Value="selectedMonth" Data="@monthList" TextProperty="Text" ValueProperty="Value" Style="width: 100%;" />
    </div>
    <div style="flex: 1 1 200px;">
        <RadzenDropDown @bind-Value="selectedYear" Data="@yearList" TextProperty="Text" ValueProperty="Value" Style="width: 100%;" />
    </div>
    <div style="flex: 1 1 200px;">
        <RadzenButton Text="Filtruj" Click="@OnFilterClick" Style="height: 36px; width: 100%;" />
    </div>
    <div style="flex: 1 1 200px;">
        <RadzenButton Text="Roczny" Click="@NavigateToYearlyDashboard" Style="height: 36px; width: 100%;" />
    </div>
</div>

<div style="display: flex; gap: 20px; flex-wrap: wrap; justify-content: space-between; margin-top: 20px;">
    <!-- Widget Sprzedane Produkty Dzisiaj -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Sprzedane produkty</h4>
        <div style="margin-bottom: 10px;">
            @if (totalSoldToday > 0)
            {
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <span style="color: #3a3a3a; font-weight: 500;">Dzisiaj</span>
                    <span style="font-size: 20px; color: #085786; font-weight: 600;">@totalSoldToday</span>
                </div>
            }
            else
            {
                <p style="color: #757575;">Brak sprzedanych produktów dzisiaj.</p>
            }
        </div>
        <div>
            @if (totalSoldThisMonth > 0)
            {
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <span style="color: #3a3a3a; font-weight: 500;">W tym miesi¹cu</span>
                    <span style="font-size: 20px; color: #085786; font-weight: 600;">@totalSoldThisMonth</span>
                </div>
            }
            else
            {
                <p style="color: #757575;">Brak sprzedanych produktów w tym miesi¹cu.</p>
            }
        </div>
    </RadzenCard>

    <!-- Widget Obrót -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Obrót:</h4>
        <div style="margin-bottom: 10px;">
            @if (totalRevenueToday > 0)
            {
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <span style="color: #3a3a3a; font-weight: 500;">Dzisiaj</span>
                    <span style="font-size: 20px; color: #085786; font-weight: 600;">@totalRevenueToday</span>
                </div>
            }
            else
            {
                <p style="color: #757575;">Brak obrotu pieniêdzmi dzisiaj.</p>
            }
        </div>
        <div style="margin-bottom: 10px;">
            @if (totalRevenueThisMonth > 0)
            {
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <span style="color: #3a3a3a; font-weight: 500;">W tym miesi¹cu</span>
                    <span style="font-size: 20px; color: #085786; font-weight: 600;">@totalRevenueThisMonth.ToString("F2")</span>
                </div>
            }
            else
            {
                <p style="color: #757575;">Brak obrotu pieniêdzmi w tym miesi¹cu.</p>
            }
        </div>
    </RadzenCard>

    <!-- Widget Produkty z brakami w magazynie -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Produkty z brakami w magazynie</h4>
        <br /> 
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span style="font-size: 18px; color: #3a3a3a; font-weight: 500;">Liczba produktów:</span>
            <span style="font-size: 20px; color: #d9534f; font-weight: 600;">@outOfStockCount</span>
        </div>
    </RadzenCard>


    <!-- Widget Ostatni zakupiony produkt -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Ostatnio zakupiony produkt</h4>
        @if (lastPurchasedProduct != null)
        {
            <div>
                <p><strong>Produkt:</strong> @lastPurchasedProduct.ProductName</p>
                <p><strong>Iloœæ:</strong> @lastPurchasedProduct.Quantity</p>
            </div>
        }
        else
        {
            <p style="color: #757575;">Brak zakupów.</p>
        }
    </RadzenCard>
</div>


<!-- Widget Top 5 produktów -->
<div style="display: flex; gap: 20px; flex-wrap: wrap; justify-content: space-between; margin-top: 20px;">
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Top 5 produktów miesi¹ca</h4>
        @if (topProducts != null && topProducts.Any())
        {
            <ul style="list-style: none; padding-left: 0;">
                @foreach (var product in topProducts)
                {
                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <span style="color: #3a3a3a; font-weight: 500;">@product.ProductName:</span>
                        <span style="font-size: 18px; color: #085786; font-weight: 600;">@product.TotalQuantity</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p style="color: #757575;">Brak danych dla wybranego miesi¹ca.</p>
        }
    </RadzenCard>

    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Top 5 kupuj¹cych</h4>
        @if (topBuyers != null && topBuyers.Any())
        {
            <ul style="list-style: none; padding-left: 0;">
                @foreach (var buyer in topBuyers)
                {
                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <span style="color: #3a3a3a; font-weight: 500;">@buyer.UserName :</span>
                        <span style="font-size: 18px; color: #085786; font-weight: 600;">@buyer.TotalSpent.ToString("C")</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p style="color: #757575;">Brak danych dla wybranego miesi¹ca.</p>
        }
    </RadzenCard>


    <!-- Widget Top kategorie miesi¹ca -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Top kategorie miesi¹ca</h4>
        @if (topCategories != null && topCategories.Any())
        {
            <ul style="list-style: none; padding-left: 0;">
                @foreach (var category in topCategories)
                {
                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <span style="color: #3a3a3a; font-weight: 500;">@category.CategoryName:</span>
                        <span style="font-size: 18px; color: #085786; font-weight: 600;">@category.TotalQuantity</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p style="color: #757575;">Brak danych dla wybranego miesi¹ca.</p>
        }
    </RadzenCard>

    <!-- Widget Top 5 najrzadziej kupowanych produktów -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 23%;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Top 5 najrzadziej kupowanych produktów</h4>
        @if (leastSoldProducts != null && leastSoldProducts.Any())
        {
            <ul style="list-style: none; padding-left: 0;">
                @foreach (var product in leastSoldProducts)
                {
                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <span style="color: #3a3a3a; font-weight: 500;">@product.ProductName:</span>
                        <span style="font-size: 18px; color: #d9534f; font-weight: 600;">@product.TotalQuantity</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p style="color: #757575;">Brak danych dla wybranego miesi¹ca.</p>
        }
    </RadzenCard>


</div>

<RadzenStack Style="margin-top: 20px;">
    <!-- Widget Wykres -->
    <RadzenCard>
        <RadzenChart>
            <RadzenColumnSeries Data="@salesData" CategoryProperty="Date" ValueProperty="Quantity" Title="Sprzedane produkty">
                <RadzenSeriesDataLabels Visible="true" />
            </RadzenColumnSeries>

            <RadzenCategoryAxis>
                <RadzenAxisTitle Text="Data" />
            </RadzenCategoryAxis>

            <RadzenValueAxis>
                <RadzenAxisTitle Text="Iloœæ sprzedanych produktów" />
            </RadzenValueAxis>
        </RadzenChart>
    </RadzenCard>
</RadzenStack>


@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    private decimal totalRevenueToday;
    private int totalSoldToday;
    private List<SalesData> salesData = new List<SalesData>();

    private int selectedMonth = DateTime.Today.Month;
    private int selectedYear = DateTime.Today.Year;
    private int totalSoldForMonth;
    private int totalSoldThisMonth;
    private decimal totalRevenueThisMonth;
    private int outOfStockCount;
    private List<TopBuyer> topBuyers = new();
    private LastPurchasedProduct lastPurchasedProduct;

    private List<CategorySalesData> categoryRanking = new();
    private List<CategorySalesData> topCategories;
    private List<TopProduct> leastSoldProducts = new();




    private List<TopProduct> topProducts;

    private List<DropDownItem> monthList = new List<DropDownItem>
    {
        new DropDownItem { Text = "Styczeñ", Value = 1 },
        new DropDownItem { Text = "Luty", Value = 2 },
        new DropDownItem { Text = "Marzec", Value = 3 },
        new DropDownItem { Text = "Kwiecieñ", Value = 4 },
        new DropDownItem { Text = "Maj", Value = 5 },
        new DropDownItem { Text = "Czerwiec", Value = 6 },
        new DropDownItem { Text = "Lipiec", Value = 7 },
        new DropDownItem { Text = "Sierpieñ", Value = 8 },
        new DropDownItem { Text = "Wrzesieñ", Value = 9 },
        new DropDownItem { Text = "PaŸdziernik", Value = 10 },
        new DropDownItem { Text = "Listopad", Value = 11 },
        new DropDownItem { Text = "Grudzieñ", Value = 12 }
    };

    private List<DropDownItem> yearList = new List<DropDownItem>
    {
        new DropDownItem { Text = (DateTime.Today.Year - 1).ToString(), Value = DateTime.Today.Year - 1 },
        new DropDownItem { Text = DateTime.Today.Year.ToString(), Value = DateTime.Today.Year },
        new DropDownItem { Text = (DateTime.Today.Year + 1).ToString(), Value = DateTime.Today.Year + 1 }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadSalesData();
        await LoadTotalSoldToday();
        await LoadTotalRevenueToday();
        await LoadTopProducts();
        await LoadTotalSoldThisMonth();
        await LoadTotalRevenueThisMonth();
        await LoadCategoryRanking();
        await LoadOutOfStockCount();
        await LoadTopBuyers();
        await LoadLastPurchasedProduct();
        await LoadLeastSoldProducts();
    }

    private async Task OnFilterClick()
    {
        await LoadSalesData();
        await LoadTotalSoldToday();
        await LoadTotalRevenueToday();
        await LoadTopProducts();
        await LoadTotalSoldThisMonth();
        await LoadTotalRevenueThisMonth();
        await LoadCategoryRanking();
        await LoadOutOfStockCount();
        await LoadTopBuyers();
        await LoadLastPurchasedProduct();
        await LoadLeastSoldProducts();
    }

    private async Task LoadSalesData()
    {
        salesData = await CartService.GetSalesDataForMonthAsync(selectedYear, selectedMonth);
    }

    private async Task LoadTotalSoldToday()
    {
        totalSoldToday = await CartService.GetTotalSoldTodayAsync();
    }

    private async Task LoadTotalRevenueToday()
    {
        var orderItems = await CartService.GetOrderItemsSoldTodayAsync();
        totalRevenueToday = orderItems
            .Where(item => item.CreationDate.Date == DateTime.Today)
            .Sum(item => item.Quantity * item.UnitPrice);
    }

    private async Task LoadTopProducts()
    {
        topProducts = await CartService.GetTopProductsForMonthAsync(selectedYear, selectedMonth);
    }
    private async Task LoadTotalSoldThisMonth()
    {
        totalSoldThisMonth = await CartService.GetTotalSoldForMonthAsync(selectedYear, selectedMonth);
    }

    private async Task LoadTotalRevenueThisMonth()
    {
        totalRevenueThisMonth = await CartService.GetTotalRevenueForMonthAsync(selectedYear, selectedMonth);
    }

    private async Task LoadCategoryRanking()
    {
        //categoryRanking = await CartService.GetCategoryRankingForMonthAsync(selectedYear, selectedMonth);
        topCategories = await CartService.GetCategoryRankingForMonthAsync(selectedYear, selectedMonth);
    }

    private async Task LoadOutOfStockCount()
    {
        outOfStockCount = await ProductService.GetOutOfStockCountAsync();
    }

    // private void NavigateToOutOfStock()
    // {
    //     NavigationManager.NavigateTo("/store/products?filter=StockQuantity eq 0");
    // }

    private async Task LoadTopBuyers()
    {
        topBuyers = await CartService.GetTopBuyersForMonthAsync(selectedYear, selectedMonth);
    }

    private async Task LoadLastPurchasedProduct()
    {
        lastPurchasedProduct = await CartService.GetLastPurchasedProductAsync();
    }

    private async Task LoadLeastSoldProducts()
    {
        leastSoldProducts = await CartService.GetLeastSoldProductsForMonthAsync(selectedYear, selectedMonth);
    }

    private void NavigateToYearlyDashboard()
    {
        NavigationManager.NavigateTo("/analytics/yearly-dashboard");
    }


    public class DropDownItem
    {
        public string Text { get; set; }
        public int Value { get; set; }
    }
}
