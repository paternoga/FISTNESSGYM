@page "/store/products-catalog"
@using FISTNESSGYM.Services
@inject IProductService ProductService
@inject ICartService CartService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@using FISTNESSGYM.Models.database
@using System.Security.Claims
@using Radzen
@using Radzen.Blazor
@inherits LayoutComponentBase

<PageTitle>KATALOG PRODUKTÓW</PageTitle>


<link href="css/store/productcatalog.css" rel="stylesheet" />



<div class="filters">
    <RadzenTextBox Placeholder="Wyszukaj produkt..."
                   Style="width: 100%; margin-bottom: 10px; height: 43px"
                   @oninput="OnSearchInput"
                   class="filter-input" />

    <RadzenDropDown Placeholder="Wszystkie kategorie"
                    Data="@categories"
                    @bind-Value="selectedCategory"
                    Change="OnCategoryChange"
                    Style="width: 100%; margin-bottom: 10px; height: 43px"
                    AllowClear="true"
                    class="filter-select" />

    <RadzenButton Text="Sortuj według ceny"
                  Click="SortByPrice"
                  Style="width: 100%; height: 43px"
                  class="filter-button" />
</div>

<div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
</div>

<div class="product-list">
    @if (!products.Any())
    {
        <p>Brak produktów do wyświetlenia.</p>
    }
    else
    {
        @foreach (var product in PaginatedProducts)
        {
            <div class="product-item">
                <h4 class="product-name">@product.Name</h4>
                <p class="product-description">@product.Description</p>
                <p class="product-price">@product.Price zł</p>

                <div class="button-group">
                    <RadzenButton Text="Szczegóły"
                                  Click="() => NavigateToDetails(product.Id)"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Style="width: 60%; height: 36px;"
                                  class="rz-button rz-button-md rz-variant-filled rz-primary rz-shade-default filter-button" />

                    <RadzenButton Icon="shopping_cart"
                                  Click="() => AddToCart(product)"
                                  ButtonStyle="ButtonStyle.Warning"
                                  Style="width: 25%; height: 36px; background-color: #ffc107;"
                                  class="add-to-cart-button" />
                </div>
            </div>
        }
    }
</div>

<div class="pagination">
    <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)" class="pagination-button" style="background-color: #4340d2">Poprzednia</button>
    <span class="pagination-info">Strona @currentPage z @totalPages</span>
    <button @onclick="NextPage" disabled="@(!CanGoToNextPage)" class="pagination-button" style="background-color: #4340d2">Następna</button>
</div>

@code {
    private List<Product> products = new();
    private List<Product> filteredProducts = new();
    private List<string> categories = new();
    private string searchTerm = "";
    private string selectedCategory = "";
    private bool sortAscending = true;

    private int currentPage = 1;
    private int itemsPerPage = 15;
    private string successMessage = "";

    private int totalPages => (int)Math.Ceiling((double)filteredProducts.Count / itemsPerPage);
    private IEnumerable<Product> PaginatedProducts => filteredProducts.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);

    private Radzen.Blazor.RadzenNotification notification;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
        categories = await ProductService.GetAllCategoriesAsync();
        ApplyFilters();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        ApplyFilters();
    }

    private void OnCategoryChange(object value)
    {
        selectedCategory = value?.ToString();
        ApplyFilters();
    }

    private void SortByPrice()
    {
        filteredProducts = sortAscending
            ? filteredProducts.OrderBy(p => p.Price).ToList()
            : filteredProducts.OrderByDescending(p => p.Price).ToList();
        sortAscending = !sortAscending;
    }

    private void ApplyFilters()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrEmpty(searchTerm) || p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(p => string.IsNullOrEmpty(selectedCategory) || p.Category == selectedCategory)
            .ToList();

        currentPage = 1; // Resetuj do pierwszej strony po filtrowaniu
    }

    private void NavigateToDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product-details/{productId}");
    }

    private void ShowNotification(string message, NotificationSeverity severity)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = severity,
                Summary = severity == NotificationSeverity.Success ? "Sukces" : "Błąd",
                Detail = message,
                Duration = 4000
            });
    }

    private async Task AddToCart(Product product)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                var stockQuantity = await ProductService.GetProductStockQuantityAsync(product.Id);
                var cartItem = await CartService.GetCartItemAsync(userId, product.Id);

                string message;
                NotificationSeverity severity;

                if (cartItem != null)
                {
                    if (cartItem.Quantity < stockQuantity)
                    {
                        cartItem.Quantity++;
                        await CartService.UpdateCartItemAsync(cartItem);
                        message = $"{product.Name} został zwiększony w koszyku.";
                        severity = NotificationSeverity.Success; // Ustawienie na sukces
                    }
                    else
                    {
                        message = $"{product.Name} nie może być dodany do koszyka, ponieważ dostępna ilość w magazynie to tylko {stockQuantity}.";
                        severity = NotificationSeverity.Error; // Ustawienie na błąd
                    }
                }
                else
                {
                    if (stockQuantity > 0)
                    {
                        await CartService.AddToCart(userId, product, 1);
                        message = $"{product.Name} został dodany do koszyka!";
                        severity = NotificationSeverity.Success; // Ustawienie na sukces
                    }
                    else
                    {
                        message = $"{product.Name} jest obecnie niedostępny w magazynie.";
                        severity = NotificationSeverity.Error; // Ustawienie na błąd
                    }
                }

                // Wyświetl powiadomienie tylko raz
                ShowNotification(message, severity);

                StateHasChanged();
            }
        }
        else
        {
            ShowNotification("Musisz być zalogowany, aby dodać produkty do koszyka.", NotificationSeverity.Error);
            StateHasChanged();
        }
    }



    private void NextPage()
    {
        if (CanGoToNextPage)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
            currentPage--;
    }

    private bool CanGoToNextPage => currentPage < totalPages;
    private bool CanGoToPreviousPage => currentPage > 1;
}
