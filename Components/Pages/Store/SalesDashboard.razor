@page "/sales-dashboard"
@inject ICartService CartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using FISTNESSGYM.Models.database
@using FISTNESSGYM.Models.Database
@using FISTNESSGYM.Services

@attribute [Authorize]

<div style="display: flex; gap: 20px;">
    <!-- Pierwsza karta - Sprzedane produkty dzisiaj -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 340px; height: 160px;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Sprzedane produkty dzisiaj</h4>

        @if (totalSoldToday > 0)
        {
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <span style="color: #3a3a3a; font-weight: 500;">£¹czna liczba:</span>
                <span style="font-size: 22px; color: #085786; font-weight: 600;">@totalSoldToday</span>
            </div>
        }
        else
        {
            <p style="color: #757575;">Brak sprzedanych produktów dzisiaj.</p>
        }
    </RadzenCard>

    <!-- Druga karta - Zarobione pieni¹dze dzisiaj -->
    <RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 340px; height: 160px;">
        <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Obrót dzisiaj</h4>

        @if (totalRevenueToday > 0)
        {
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <span style="color: #3a3a3a; font-weight: 500;">£¹czna kwota:</span>
                <span style="font-size: 22px; color: #085786; font-weight: 600;">@totalRevenueToday</span>
            </div>
        }
        else
        {
            <p style="color: #757575;">Brak zarobionych pieniêdzy dzisiaj.</p>
        }
    </RadzenCard>
</div>

<div style="display: flex; justify-content: space-between;">
    <!-- Przycisk przewijania do ty³u -->
    <RadzenButton Text="Poprzednie 7 dni" Click="LoadPreviousWeek" Style="margin-top: 20px;" />

    <!-- Przycisk przewijania do przodu -->
    <RadzenButton Text="Nastêpne 7 dni" Click="LoadNextWeek" Style="margin-top: 20px;" />
</div>

<RadzenStack>
    <RadzenCard>
        <RadzenChart>

            <RadzenColumnSeries Data="@salesData" CategoryProperty="Date" ValueProperty="Quantity" Title="Sprzedane produkty">
                <RadzenSeriesDataLabels Visible="true" />
            </RadzenColumnSeries>

            <RadzenCategoryAxis>
                <RadzenAxisTitle Text="Data" />
            </RadzenCategoryAxis>

            <RadzenValueAxis>
                <RadzenAxisTitle Text="Iloœæ sprzedanych produktów" />
            </RadzenValueAxis>
        </RadzenChart>
    </RadzenCard>
</RadzenStack>

@code {
    private decimal totalRevenueToday;
    private int totalSoldToday;
    private List<SalesData> salesData = new List<SalesData>();
    private DateTime startDate = DateTime.Today.AddDays(-7); // pocz¹tek zakresu (7 dni temu)
    private DateTime endDate = DateTime.Today; // koniec zakresu (dzisiaj)

    // Ta metoda oblicza ³¹czny przychód dzisiaj za pomoc¹ LINQ
    protected override async Task OnInitializedAsync()
    {
        await LoadSalesData();
    }

    // £adowanie danych sprzeda¿y z CartService
    private async Task LoadSalesData()
    {
        // Pobranie danych sprzeda¿y z serwisu w oparciu o daty
        salesData = await CartService.GetSalesDataForPeriodAsync(startDate, endDate);

        // Pobranie iloœci sprzedanych produktów dzisiaj
        totalSoldToday = await CartService.GetTotalSoldTodayAsync();

        // Pobranie przedmiotów sprzedanych dzisiaj
        var orderItems = await CartService.GetOrderItemsSoldTodayAsync();

        // Obliczenie ³¹cznego przychodu dzisiaj
        totalRevenueToday = orderItems
            .Where(item => item.CreationDate.Date == DateTime.Today)
            .Sum(item => item.Quantity * item.UnitPrice);
    }

    // Funkcja do ³adowania danych sprzeda¿y dla poprzednich 7 dni
    private async Task LoadPreviousWeek()
    {
        startDate = startDate.AddDays(-7);
        endDate = endDate.AddDays(-7);
        await LoadSalesData();
    }

    // Funkcja do ³adowania danych sprzeda¿y dla nastêpnych 7 dni
    private async Task LoadNextWeek()
    {
        startDate = startDate.AddDays(7);
        endDate = endDate.AddDays(7);
        await LoadSalesData();
    }



}
