@page "/store/cart"
@inject ICartService CartService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject databaseService databaseService
@using System.Security.Claims
@using FISTNESSGYM.Models.database
@using FISTNESSGYM.Services

@attribute [Authorize]

<PageTitle>KOSZYK</PageTitle>

<h3 style="text-align: center; margin-bottom: 20px;">Twój koszyk</h3>

@if (cartItems == null)
{
    
}
else if (!cartItems.Any())
{
    <p style="text-align: center;">Twój koszyk jest pusty.</p>
}
else
{
    <div style="margin: 0 auto; max-width: 600px;">
        @foreach (var item in cartItems)
        {
            <RadzenCard Style="margin-bottom: 10px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h4>@item.Product.Name</h4>
                        <p>@item.Quantity sztuk - @item.Product.Price zł</p>
                    </div>
                    <div>
                        <RadzenButton Text="Usuń" Click="@(async () => await RemoveFromCart(item.Product.Id))" Style="margin-right: 5px;" 
                                      class="button-primary" />
                    </div>
                </div>
            </RadzenCard>
        }

        <RadzenCard Style="margin-top: 20px; text-align: center;">
            <p><strong>Łączna kwota:</strong> @totalAmount zł</p>
            <RadzenButton Text="Złóż zamówienie" Click="@PlaceOrder" Style="margin: 10px;" class="button-primary" />
            <RadzenButton Text="Wyczyść koszyk" Click="@ClearCart" Style="margin: 10px;" class="button-primary" />
        </RadzenCard>
    </div>
}

@code {
    private List<CartItem> cartItems = new();
    private decimal totalAmount;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                cartItems = await CartService.GetCartItemsAsync(userId);
                totalAmount = CalculateTotalAmount(cartItems);
            }
        }
        else
        {
            cartItems.Clear();
            totalAmount = 0;
        }

        StateHasChanged();
    }

    private decimal CalculateTotalAmount(List<CartItem> items)
    {
        decimal total = 0;
        foreach (var item in items)
        {
            total += item.Quantity * item.Product.Price;
        }
        return total;
    }

    private async Task RemoveFromCart(int productId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                await CartService.RemoveFromCartAsync(userId, productId);
                await LoadCartItems(); 
            }
        }
    }

    private async Task ClearCart()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                await CartService.ClearCartAsync(userId);
                await LoadCartItems(); 
            }
        }
    }
    private async Task PlaceOrder()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                decimal totalAmount = CalculateTotalAmount(cartItems);
                var order = new Order
                    {
                        UserId = userId,
                        OrderDate = DateTime.Now,
                        TotalAmount = totalAmount,
                        OrderStatusId = 1,
                        OrderStatusName = "Złożone"
                    };

                try
                {
                    await CartService.PlaceOrderAsync(order, cartItems);

                    await CartService.ClearCartAsync(userId);
                    await LoadCartItems();
                    NavigationManager.NavigateTo("/store/order-success");
                    var notification = new Notification
                        {
                            UserId = userId,
                            Title = $"Twoje zamówienie zostało pomyślnie złożone. Pamiętaj, aby je opłacić, aby proces realizacji mógł przebiegać bez opóźnień.",
                            CreatedAt = DateTime.UtcNow.AddHours(1)
                        };
                    await databaseService.CreateNotificationAsync(notification);
                }
                catch (InvalidOperationException ex)
                {
                    await CartService.ClearCartAsync(userId);
                    NavigationManager.NavigateTo("/store/order-failed");
                }
            }
        }
    }
}
