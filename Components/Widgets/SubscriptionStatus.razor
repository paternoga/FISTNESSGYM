@page "/subscription-status"  
@using FISTNESSGYM.Models.database
@using FISTNESSGYM.Services
@using System.Security.Claims
@using System.Globalization
@inject SubscriptionService SubscriptionService
@inject AuthenticationStateProvider AuthenticationStateProvider

<RadzenCard Style="padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0; width: 340px; height: 160px;">
    <h4 style="color: #3a3a3a; font-weight: 600; margin-top: 0px;">Status Subskrypcji</h4>
    @if (Subscription != null)
    {
        var daysLeft = GetDaysLeft();
        var totalDays = GetTotalDays();
        var progressPercentage = totalDays > 0 ? Math.Round(daysLeft * 100.0 / totalDays) : 0;

        <div style="display: flex; align-items: center; justify-content: space-between;">

            <span style="color: #3a3a3a; font-weight: 500;">Typ subskrypcji:</span>
            <span style="font-size: 22px; color: #085786; font-weight: 300;">@Subscription.SubscriptionType?.TypeName</span>
            
        </div>
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span style="color: #3a3a3a; font-weight: 500;">Pozostało dni:</span>
            <span style="font-size: 22px; color: #085786; font-weight: 600;">@daysLeft</span>
        </div>

        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Info" Value="@(progressPercentage)" ShowValue="false" Style="height: 20px; margin-top: 5px; background-color: #d0e7f5;" />
    }
    else
    {
        <p style="color: #757575;">Brak aktywnej subskrypcji.</p>
    }
</RadzenCard>

@code {
    private Subscription Subscription;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            Subscription = await SubscriptionService.GetCurrentSubscriptionAsync(userId);
        }
    }

    public int GetDaysLeft()
    {
        if (Subscription == null)
        {
            return 0;
        }

        return Subscription.GetDaysUntilExpiration();
    }

    public int GetTotalDays()
    {
        if (Subscription == null)
        {
            return 1; 
        }

        return (Subscription.EndDate - Subscription.StartDate).Days;
    }
}

